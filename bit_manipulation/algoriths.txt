Sure! Here’s a comprehensive list of algorithms and common problems based on **bit manipulation** techniques. Bit manipulation is very popular in competitive programming, system design, and optimization problems because it allows working efficiently with bits directly.

---

## Algorithms / Problems Based on Bit Manipulation

### 1. Basic Bit Operations

* Check if a number is even or odd using bitwise AND
* Get the ith bit of a number
* Set the ith bit of a number
* Clear the ith bit of a number
* Toggle the ith bit of a number
* Update the ith bit of a number

### 2. Bit Counting

* Count the number of set bits (1s) in a number (Brian Kernighan’s Algorithm)
* Count leading zeros
* Count trailing zeros
* Parity check (whether the number of set bits is odd or even)

### 3. Bit Masks and Subsets

* Generate all subsets of a set using bit masks
* Check if a subset contains an element using bit masks
* Count subsets with specific properties using bit masks
* Use bit masking to solve problems like "subset sum"

### 4. Powers of Two

* Check if a number is a power of two
* Get the next power of two greater or equal to a number
* Count how many powers of two sum up to a number (binary representation)

### 5. Swap Two Numbers without Temporary Variable

* Using XOR to swap two integers without a temp variable

### 6. Finding Unique Elements

* Find the single number in an array where every other element appears twice (XOR trick)
* Find two non-repeating elements where every other element appears twice
* Find the element that appears once where every other appears thrice (using bitwise counting)
* Find the element that appears once where every other appears k times

### 7. Bitwise Arithmetic

* Add two numbers without using `+` operator (using bitwise operators)
* Multiply two numbers using bitwise shifts and addition
* Divide two numbers using bitwise operations

### 8. Gray Code

* Generate Gray codes of n bits
* Convert between binary and Gray code

### 9. Bitwise Tricks and Misc

* Reverse bits of a number
* Check if two numbers have opposite signs
* Get the rightmost set bit of a number
* Remove the rightmost set bit of a number
* Isolate the rightmost set bit
* Check if a number is a multiple of 4 using bits
* Find the number of bits to flip to convert one number to another
* Find the XOR of all numbers from 1 to n
* Calculate the modulo by a power of two (using bitwise AND)

### 10. Bitwise DP (Dynamic Programming)

* Solve problems like Traveling Salesman Problem using bitmask DP
* Solve subset-related DP problems with bitmask states

### 11. Common Coding Interview Problems

* Maximum XOR of two numbers in an array (using Trie or bitwise approach)
* Find missing number in an array from 1 to n using XOR
* Find the pair with the maximum XOR value in an array
* Count number of integers in a range whose XOR with a given number is less than k

---

## Bonus: Bit Manipulation Utilities

* Left shift and right shift operations
* Arithmetic vs logical right shift
* Circular shifts (rotate left/right)
* Mask generation to extract or update specific bits

---

If you want, I can provide code samples or explanations on any of these algorithms in a particular language like TypeScript, Python, C++, or Java. Just let me know!
